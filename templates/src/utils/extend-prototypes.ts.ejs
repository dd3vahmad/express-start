<% if (answers.language == "TypeScript") { -%>
/**
 * Safely extends built-in prototypes with custom utility methods.
 * Adds:
 * - Array.binarySearch
 * - Object.pick
 * - Array.chunk
 */
export function extendPrototypes() {
  /**
   * Performs a binary search on a sorted array.
   * @template T
   * @param {T} this - The array to search (must be sorted ascending).
   * @param {T} value - The value to search for.
   * @returns {number} The index of the value, or -1 if not found.
   * @example
   * [1, 3, 5, 7, 9].binarySearch(5); // => 2
   */
  if (typeof Array.prototype.binarySearch === 'undefined') {
    const binarySearch = function <T>(this: T[], value: T): number {
      let low = 0;
      let high = this.length - 1;
      while (low <= high) {
        const mid = Math.floor((low + high) / 2);
        const midVal = this[mid];
        if (midVal < value) {
          low = mid + 1;
        } else if (midVal > value) {
          high = mid - 1;
        } else {
          return mid;
        }
      }
      return -1;
    };

    Object.defineProperty(binarySearch, 'description', {
      value: 'Performs a binary search on a sorted array and returns the index of the match or -1 if not found.',
      writable: false,
      enumerable: false
    });

    Object.defineProperty(Array.prototype, 'binarySearch', {
      value: binarySearch,
      writable: true,
      enumerable: false,
      configurable: true
    });
  }

  /**
   * Returns a shallow copy of an object containing only the specified keys.
   * @param {string[]} keys - The list of keys to pick.
   * @returns {Record<string, any>} New object containing only those keys.
   * @example
   * ({ name: 'Rabiu', age: 22, role: 'dev' }).pick(['name', 'role']);
   * // => { name: 'Rabiu', role: 'dev' }
   */
  if (typeof Object.prototype.pick === 'undefined') {
    const pick = function (this: any, keys: string[]): Record<string, any> {
      const result: Record<string, any> = {};
      for (const key of keys) {
        if (Object.hasOwn(this, key)) {
          result[key] = this[key];
        }
      }
      return result;
    };

    Object.defineProperty(pick, 'description', {
      value: 'Creates a shallow copy of the object containing only the specified keys.',
      writable: false,
      enumerable: false
    });

    Object.defineProperty(Object.prototype, 'pick', {
      value: pick,
      writable: true,
      enumerable: false,
      configurable: true
    });
  }

  /**
   * Splits an array into equally sized chunks.
   * @template T
   * @param {number} size - The maximum size of each chunk.
   * @returns {T[][]} An array of chunks.
   * @example
   * [1, 2, 3, 4, 5].chunk(2);
   * // => [[1, 2], [3, 4], [5]]
   */
  if (typeof Array.prototype.chunk === 'undefined') {
    const chunk = function <T>(this: T[], size: number): T[][] {
      const chunks: T[][] = [];
      for (let i = 0; i < this.length; i += size) {
        chunks.push(this.slice(i, i + size));
      }
      return chunks;
    };

    Object.defineProperty(chunk, 'description', {
      value: 'Splits an array into equally sized chunks.',
      writable: false,
      enumerable: false
    });

    Object.defineProperty(Array.prototype, 'chunk', {
      value: chunk,
      writable: true,
      enumerable: false,
      configurable: true
    });
  }

  console.log('ðŸ”§ Prototypes extended safely (with runtime descriptions)');
}
<% } else { -%>
/**
 * Safely extends built-in prototypes with custom utility methods.
 * Adds:
 * - Array.binarySearch
 * - Object.pick
 * - Array.chunk
 */
export function extendPrototypes() {
  /**
   * Performs a binary search on a sorted array.
   * @param {*} value - The value to search for.
   * @returns {number} The index of the value, or -1 if not found.
   * @example
   * [1, 3, 5, 7, 9].binarySearch(5); // => 2
   */
  if (typeof Array.prototype.binarySearch === 'undefined') {
    const binarySearch = function (value) {
      let low = 0;
      let high = this.length - 1;
      while (low <= high) {
        const mid = Math.floor((low + high) / 2);
        const midVal = this[mid];
        if (midVal < value) {
          low = mid + 1;
        } else if (midVal > value) {
          high = mid - 1;
        } else {
          return mid;
        }
      }
      return -1;
    };

    Object.defineProperty(binarySearch, 'description', {
      value: 'Performs a binary search on a sorted array and returns the index of the match or -1 if not found.',
      writable: false,
      enumerable: false
    });

    Object.defineProperty(Array.prototype, 'binarySearch', {
      value: binarySearch,
      writable: true,
      enumerable: false,
      configurable: true
    });
  }

  /**
   * Returns a shallow copy of an object containing only the specified keys.
   * @param {string[]} keys - The list of keys to pick.
   * @returns {Object} New object containing only those keys.
   * @example
   * ({ name: 'Rabiu', age: 22, role: 'dev' }).pick(['name', 'role']);
   * // => { name: 'Rabiu', role: 'dev' }
   */
  if (typeof Object.prototype.pick === 'undefined') {
    const pick = function (keys) {
      const result = {};
      for (const key of keys) {
        if (Object.hasOwn(this, key)) {
          result[key] = this[key];
        }
      }
      return result;
    };

    Object.defineProperty(pick, 'description', {
      value: 'Creates a shallow copy of the object containing only the specified keys.',
      writable: false,
      enumerable: false
    });

    Object.defineProperty(Object.prototype, 'pick', {
      value: pick,
      writable: true,
      enumerable: false,
      configurable: true
    });
  }

  /**
   * Splits an array into equally sized chunks.
   * @param {number} size - The maximum size of each chunk.
   * @returns {Array[]} An array of chunks.
   * @example
   * [1, 2, 3, 4, 5].chunk(2);
   * // => [[1, 2], [3, 4], [5]]
   */
  if (typeof Array.prototype.chunk === 'undefined') {
    const chunk = function (size) {
      const chunks = [];
      for (let i = 0; i < this.length; i += size) {
        chunks.push(this.slice(i, i + size));
      }
      return chunks;
    };

    Object.defineProperty(chunk, 'description', {
      value: 'Splits an array into equally sized chunks.',
      writable: false,
      enumerable: false
    });

    Object.defineProperty(Array.prototype, 'chunk', {
      value: chunk,
      writable: true,
      enumerable: false,
      configurable: true
    });
  }

  console.log('ðŸ”§ Prototypes extended safely (with runtime descriptions)');
}
<% } -%>
