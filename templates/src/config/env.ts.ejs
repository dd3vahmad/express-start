import dotenv from "dotenv";
<% if (answers.language === "TypeScript") { -%>
<% if (answers.validator === "Joi") { -%>
import Joi from "joi";
<% } else { -%>
import { z } from "zod";
<% } -%>

dotenv.config();

<% if (answers.validator === "Joi") { -%>
const envSchema = Joi.object({
  NODE_ENV: Joi.string()
    .valid("development", "production", "test")
    .default("development"),
  PORT: Joi.number().default(3000),
  DATABASE_URL: Joi.string().uri().required().messages({
    "any.required": "DATABASE_URL is required in .env",
    "string.uri": "DATABASE_URL must be a valid URI",
  }),
  <% if (answers.auth === "JWT") { -%>
  JWT_SECRET: Joi.string().required().messages({
    "any.required": "JWT_SECRET is required in .env",
  }),
  <% } -%>
  <% if (answers.cache === "REDIS") { -%>
  REDIS_URL: Joi.string().optional(),
  <% } -%>
  <% if (answers.logger) { -%>
  LOG_LEVEL: Joi.string().default("info"),
  <% } -%>
}).unknown(true);

const { value: envVars, error } = envSchema.validate(process.env, {
  abortEarly: false,
  allowUnknown: true,
});

if (error) {
  console.error("Invalid environment configuration:");
  throw new Error(error.details.map((d) => d.message).join(", "));
}
<% } else if (answers.validator === "Zod") { -%>
const envSchema = z.object({
  NODE_ENV: z.enum(["development", "production", "test"]).default("development"),
  PORT: z.coerce.number().default(3000),
  DATABASE_URL: z
    .string()
    .url({ message: "DATABASE_URL must be a valid URI" })
    .nonempty("DATABASE_URL is required in .env"),
  <% if (answers.auth === "JWT") { -%>
  JWT_SECRET: z.string().nonempty("JWT_SECRET is required in .env"),
  <% } -%>
  <% if (answers.cache === "REDIS") { -%>
  REDIS_URL: z.string().optional(),
  <% } -%>
  <% if (answers.logger) { -%>
  LOG_LEVEL: z.string().default("info"),
  <% } -%>
}).passthrough();

const parsed = envSchema.safeParse(process.env);

if (!parsed.success) {
  console.error("Invalid environment configuration:");
  const messages = parsed.error.errors.map((err) => `${err.path.join(".")}: ${err.message}`);
  throw new Error(messages.join(", "));
}

const envVars = parsed.data;
<% } -%>

export const env = Object.freeze({
  env: envVars.NODE_ENV,
  isDev: envVars.NODE_ENV === "development",
  isProd: envVars.NODE_ENV === "production",
  port: envVars.PORT,
  dbUrl: envVars.DATABASE_URL,
  <% if (answers.auth === "JWT") { -%>
  jwtSecret: envVars.JWT_SECRET,
  <% } -%>
  <% if (answers.cache === "REDIS") { -%>
  redisUrl: envVars.REDIS_URL,
  <% } -%>
  <% if (answers.logger) { -%>
  logLevel: envVars.LOG_LEVEL,
  <% } -%>
});
<% } else { -%>
<% if (answers.validator === "Joi") { -%>
import Joi from "joi";
<% } else if (answers.validator === "Zod") { -%>
import { z } from "zod";
<% } -%>

dotenv.config();

<% if (answers.validator === "Joi") { -%>
const envSchema = Joi.object({
  NODE_ENV: Joi.string()
    .valid("development", "production", "test")
    .default("development"),

  PORT: Joi.number().default(3000),

  DATABASE_URL: Joi.string().uri().required().messages({
    "any.required": "DATABASE_URL is required in .env",
    "string.uri": "DATABASE_URL must be a valid URI",
  }),

  <% if (answers.auth === "JWT") { -%>
  JWT_SECRET: Joi.string().required().messages({
    "any.required": "JWT_SECRET is required in .env",
  }),
  <% } -%>

  <% if (answers.cache === "REDIS") { -%>
  REDIS_URL: Joi.string().optional(),
  <% } -%>

  <% if (answers.logger) { -%>
    LOG_LEVEL: Joi.string().default("info"),
  <% } -%>
}).unknown(true);

const { value: envVars, error } = envSchema.validate(process.env, {
  abortEarly: false,
  allowUnknown: true,
});

if (error) {
  console.error("Invalid environment configuration:");
  throw new Error(error.details.map((d) => d.message).join(", "));
}
<% } else if (answers.validator === "Zod") { -%>
const envSchema = z.object({
  NODE_ENV: z.enum(["development", "production", "test"]).default("development"),

  PORT: z.coerce.number().default(3000),

  DATABASE_URL: z
    .string()
    .url({ message: "DATABASE_URL must be a valid URI" })
    .nonempty("DATABASE_URL is required in .env"),

  <% if (answers.auth === "JWT") { -%>
  JWT_SECRET: z.string().nonempty("JWT_SECRET is required in .env"),
  <% } -%>

  <% if (answers.cache === "REDIS") { -%>
  REDIS_URL: z.string().optional(),
  <% } -%>

  <% if (answers.logger) { -%>
    LOG_LEVEL: z.string().default("info"),
  <% } -%>
}).passthrough();

const parsed = envSchema.safeParse(process.env);

if (!parsed.success) {
  console.error("Invalid environment configuration:");
  const messages = parsed.error.errors.map((err) => `${err.path.join(".")}: ${err.message}`);
  throw new Error(messages.join(", "));
}

const envVars = parsed.data;
<% } -%>

const env = Object.freeze({
  env: envVars.NODE_ENV,
  isDev: envVars.NODE_ENV === "development",
  isProd: envVars.NODE_ENV === "production",
  port: envVars.PORT,
  dbUrl: envVars.DATABASE_URL,
  <% if (answers.auth === "JWT") { -%>
  jwtSecret: envVars.JWT_SECRET,
  <% } -%>
  <% if (answers.cache === "REDIS") { -%>
  redisUrl: envVars.REDIS_URL,
  <% } -%>
  <% if (answers.logger) { -%>
  logLevel: envVars.LOG_LEVEL,
  <% } -%>
});

export default env;
<% } -%>
