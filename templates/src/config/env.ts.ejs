import dotenv from "dotenv";
import Joi from "joi";

dotenv.config();

const envSchema = Joi.object({
  NODE_ENV: Joi.string()
    .valid("development", "production", "test")
    .default("development"),

  PORT: Joi.number().default(3000),

  DATABASE_URL: Joi.string().uri().required().messages({
    "any.required": "DATABASE_URL is required in .env",
    "string.uri": "DATABASE_URL must be a valid URI",
  }),
  <% if (answers.auth === "JWT") { %>
    JWT_SECRET: Joi.string().required().messages({
      "any.required": "JWT_SECRET is required in .env",
    }),
  <% } -%> 
  <% if (answers.cache === "REDIS") { %>
    REDIS_URL: Joi.string().optional(),
  <% } %>
  LOG_LEVEL: Joi.string().default("info"),
}).unknown(true); // allow extra vars not explicitly defined

const { value: envVars, error } = envSchema.validate(process.env, {
  abortEarly: false,
  allowUnknown: true,
});

if (error) {
  console.error("Invalid environment configuration:");
  throw new Error(error.details.map((d) => d.message).join(", "));
}

const env = Object.freeze({
  env: envVars.NODE_ENV,
  isDev: envVars.NODE_ENV === "development",
  isProd: envVars.NODE_ENV === "production",
  port: envVars.PORT,
  dbUrl: envVars.DATABASE_URL,
  jwtSecret: envVars.JWT_SECRET,
  redisUrl: envVars.REDIS_URL,
  logLevel: envVars.LOG_LEVEL,
});

export default env;
