# <%= projectName %>

ExpressStart

## Quick Start
npm install
<% if (answers.orm === 'Prisma') { %>
npx prisma generate
<% } %>
cp .env.example .env
npm run dev

## Recomended folder structure
📦 <%= projectName %>/
├── 📁 src/
│   ├── 📁 config/           # Environment variables, database, and app configs
│   │   ├── db.ts
│   │   ├── env.ts
│   │   └── logger.ts
│   │
│   ├── 📁 models/           # Mongoose / Prisma / Sequelize models
│   │   └── user.model.ts
│   │
│   ├── 📁 controllers/      # Route handlers — contain business logic
│   │   └── user.controller.ts
│   │
│   ├── 📁 routes/           # Express routers for each resource
│   │   ├── user.routes.ts
│   │   └── index.ts
│   │
│   ├── 📁 middlewares/      # Auth, error handling, rate limiting, etc.
│   │   ├── auth.middleware.ts
│   │   ├── error.middleware.ts
│   │   └── rateLimiter.ts
│   │
│   ├── 📁 services/         # Business logic, reusable between controllers
│   │   └── user.service.ts
│   │
│   ├── 📁 utils/            # Helper functions (e.g., hashing, token utils)
│   │   ├── hash.util.ts
│   │   ├── jwt.util.ts
│   │   ├── response.util.ts
│   │   └── helpers.util.ts  # Tiny helper functions that can live in the same file
│   │
│   ├── 📁 validators/       # Joi / Zod validation schemas
│   │   └── user.validator.ts
│   │
│   ├── 📁 types/            # Global TypeScript type declarations
│   │   └── express.d.ts
│   │
│   ├── 📁 tests/            # Unit/integration tests (Jest, Mocha, etc.)
│   │   └── user.test.ts
│   │
│   ├── app.ts               # Express app setup (middlewares, routes)
│   ├── server.ts            # App entry point — starts the server
│   └── global.d.ts          # Global typings (optional)
│
├── .env                     # Environment variables
├── .env.example             # Example of required env vars
├── .gitignore
├── package.json
├── tsconfig.json
└── README.md
